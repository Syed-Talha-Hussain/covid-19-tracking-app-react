{"version":3,"sources":["InfoBox.js","Table.js","util.js","LineGraph.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","Table","countries","map","country","numeral","format","sortData","data","sort","a","b","prettyPrintStat","stat","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","Map","center","zoom","TileLayer","url","attribution","Circle","countryInfo","lat","long","fillOpacity","fillColor","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2ba9b450.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./InfoBox.css\"\r\n// import CountUp from \"react-countup\";\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nfunction InfoBox({ title, cases,  isRed, active, total, ...props }) {\r\n    return (\r\n        <Card onClick={props.onClick} \r\n        className={`infoBox ${active && \"infoBox--selected\"} \r\n        ${isRed && \"infoBox--red\"}`}>\r\n            <CardContent>\r\n\r\n                <Typography className=\"infobox_title\" color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n                    {cases}\r\n                    {/* <CountUp\r\n                        start={0}\r\n                        end={cases}\r\n                        duration={2.75}\r\n                    /> */}\r\n                </h2>\r\n\r\n                <Typography className=\"infobox_total\" color=\"textSecondary\">\r\n                {total} Total\r\n                    {/* <CountUp\r\n                        start={0}\r\n                        end={total} Total\r\n                        duration={2.75}\r\n                    /> */}\r\n                </Typography>\r\n\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react';\r\nimport numeral from \"numeral\";\r\nimport './Table.css';\r\nimport CountUp from \"react-countup\";\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({ country, cases }) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>\r\n                            {numeral(cases).format(\"0,0\")}\r\n                            {/* <CountUp\r\n                                start={0}\r\n                                end={cases}\r\n                                duration={2.75}\r\n                            /> */}\r\n                        </strong>\r\n                    </td>\r\n                </tr>\r\n\r\n            ))}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport {Circle, Popup} from \"react-leaflet\";\r\n// Utility For Sorting Table Data\r\n\r\n// export const sortData = (data) => {\r\n//     const sortedData = [...data];\r\n\r\n//     return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n// }\r\n\r\nexport const sortData = (data) => {\r\n    return [...data].sort((a, b) => b.cases - a.cases);\r\n  };\r\n\r\n  export const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n// Draw circles on map with interactive tooltop\r\n\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const showDataOnMap = (data, casesType = 'cases') => (\r\n  data.map(country => (\r\n    <Circle\r\n    center = {[country.countryInfo.lat, country.countryInfo.long]}\r\n    fillOpacity={0.4}\r\n    color={casesTypeColors[casesType].hex}\r\n    fillColor={casesTypeColors[casesType].hex}\r\n    radius = {\r\n      Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n    }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"info-name\">{country.country}</div>\r\n          \r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          \r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          \r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n\r\n  ))\r\n);\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import React from 'react';\r\nimport './Map.css';\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({countries, casesType, center, zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer \r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">\r\n                OpenStreetMap</a> contributors'\r\n                />\r\n                {/* Loop through countries and Draw circles */}\r\n                {showDataOnMap(countries, casesType)}\r\n\r\n\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Card, CardContent, FormControl, MenuItem, Select } from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Table from './Table';\nimport {sortData, prettyPrintStat} from './util';\nimport LineGraph from './LineGraph';\nimport numeral from \"numeral\";\nimport Map from './Map';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  // STATE = how to write variables in react\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response) => response.json())\n    .then((data) => {\n      setCountryInfo(data);\n    })\n  }, [])\n\n  // https://disease.sh/v3/covid-19/countries\n  useEffect(() => {\n      async function getCountriesData() {\n        await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country, //Pakistan(full name)\n            value: country.countryInfo.iso2, // Pak(Short Form)\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountries(countries);\n          setMapCountries(data);\n        })\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n        await fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n          setCountry(countryCode);\n          setCountryInfo(data);\n\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4);\n      })\n\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        {/* Header */}\n        <div className=\"app_header\">\n          <h1>Covid-19 Tracker App</h1>\n\n          {/* Title + Slect Input dropdown Field */}\n          <FormControl className=\"app_dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              <MenuItem value=\"worldwide\">WorldWide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app_stats\">\n          {/* First Info Box */}\n          <InfoBox \n          isRed\n          active = {casesType === \"cases\"}\n          onClick = {(e) => setCasesType(\"cases\")}\n          title=\"Coronavirus Cases\" \n          cases={prettyPrintStat(countryInfo.todayCases)} \n          total={prettyPrintStat(countryInfo.cases)} \n          />\n\n          {/* Second Info Box */}\n          <InfoBox \n          active = {casesType === \"recovered\"}\n          onClick = {(e) => setCasesType(\"recovered\")}\n          title=\"Recovered\" \n          cases={prettyPrintStat(countryInfo.todayRecovered)} \n          total={prettyPrintStat(countryInfo.recovered)} \n          />\n\n          {/* Third Info Box */}\n          <InfoBox \n          isRed\n          active = {casesType === \"deaths\"}\n          onClick = {(e) => setCasesType(\"deaths\")}\n          title=\"Deaths\" \n          cases={prettyPrintStat(countryInfo.todayDeaths)} \n          total={prettyPrintStat(countryInfo.deaths)} />              \n        </div>\n\n        {/* Map */}\n        <Map \n        casesType={casesType}\n        countries = {mapCountries}\n        center = {mapCenter}\n        zoom = {mapZoom}\n        />\n\n      </div>\n\n      <Card className=\"app_right\">\n        <CardContent>\n          <h3>Live Cases By Country</h3>\n          {/* Table */}\n          <Table countries={tableData} />\n          <h3 className=\"app_graphTitle\">Worldwide new {casesType}</h3>\n          {/* Graph */}\n          <LineGraph className=\"app_graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}